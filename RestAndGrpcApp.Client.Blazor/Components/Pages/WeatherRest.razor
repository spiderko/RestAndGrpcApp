@page "/weather-rest"
@using Google.Protobuf.Collections
@using Google.Protobuf.WellKnownTypes
@using RestAndGrpcApp.Client.Blazor.Clients
@using RestAndGrpcApp.Protos
@using RestAndGrpcApp.Shared.Models
@inject IWeatherForecastRestClient client;
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data sent by REST service.</p>
<p>@ApiResult</p>

<button @onclick="FetchData">Load Weather</button>

@if (data != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in data.Forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public WeatherForecasts? data;
    string ApiResult = string.Empty;

    public async Task FetchData()
    {
        var startTime = DateTime.Now;
        data = await this.client.GetWeatherForecastsByQtyAsync(1000);
        if(data != null)
        {
            var elapsed = DateTime.Now.Subtract(startTime);
            ApiResult = $"{data.Forecasts.Count} records returned via Rest API in {elapsed.TotalMilliseconds} ms";
        }
    }
}
