// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: src/protos/weatherForecast.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "./empty";
import { Timestamp } from "./timestamp";
import { StringValue } from "./wrappers";

export const protobufPackage = "";

export interface WeatherForecasts {
  forecasts: WeatherForecast[];
}

export interface WeatherForecast {
  date: Date | undefined;
  temperatureC: number;
  temperatureF: number;
  summary: string | undefined;
}

function createBaseWeatherForecasts(): WeatherForecasts {
  return { forecasts: [] };
}

export const WeatherForecasts: MessageFns<WeatherForecasts> = {
  encode(message: WeatherForecasts, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.forecasts) {
      WeatherForecast.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeatherForecasts {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeatherForecasts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.forecasts.push(WeatherForecast.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeatherForecasts {
    return {
      forecasts: globalThis.Array.isArray(object?.forecasts)
        ? object.forecasts.map((e: any) => WeatherForecast.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WeatherForecasts): unknown {
    const obj: any = {};
    if (message.forecasts?.length) {
      obj.forecasts = message.forecasts.map((e) => WeatherForecast.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WeatherForecasts>, I>>(base?: I): WeatherForecasts {
    return WeatherForecasts.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WeatherForecasts>, I>>(object: I): WeatherForecasts {
    const message = createBaseWeatherForecasts();
    message.forecasts = object.forecasts?.map((e) => WeatherForecast.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWeatherForecast(): WeatherForecast {
  return { date: undefined, temperatureC: 0, temperatureF: 0, summary: undefined };
}

export const WeatherForecast: MessageFns<WeatherForecast> = {
  encode(message: WeatherForecast, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== undefined) {
      Timestamp.encode(toTimestamp(message.date), writer.uint32(10).fork()).join();
    }
    if (message.temperatureC !== 0) {
      writer.uint32(16).int32(message.temperatureC);
    }
    if (message.temperatureF !== 0) {
      writer.uint32(24).int32(message.temperatureF);
    }
    if (message.summary !== undefined) {
      StringValue.encode({ value: message.summary! }, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeatherForecast {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeatherForecast();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.date = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.temperatureC = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.temperatureF = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.summary = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeatherForecast {
    return {
      date: isSet(object.date) ? fromJsonTimestamp(object.date) : undefined,
      temperatureC: isSet(object.temperatureC) ? globalThis.Number(object.temperatureC) : 0,
      temperatureF: isSet(object.temperatureF) ? globalThis.Number(object.temperatureF) : 0,
      summary: isSet(object.summary) ? String(object.summary) : undefined,
    };
  },

  toJSON(message: WeatherForecast): unknown {
    const obj: any = {};
    if (message.date !== undefined) {
      obj.date = message.date.toISOString();
    }
    if (message.temperatureC !== 0) {
      obj.temperatureC = Math.round(message.temperatureC);
    }
    if (message.temperatureF !== 0) {
      obj.temperatureF = Math.round(message.temperatureF);
    }
    if (message.summary !== undefined) {
      obj.summary = message.summary;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WeatherForecast>, I>>(base?: I): WeatherForecast {
    return WeatherForecast.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WeatherForecast>, I>>(object: I): WeatherForecast {
    const message = createBaseWeatherForecast();
    message.date = object.date ?? undefined;
    message.temperatureC = object.temperatureC ?? 0;
    message.temperatureF = object.temperatureF ?? 0;
    message.summary = object.summary ?? undefined;
    return message;
  },
};

export interface WeatherForecastGrpcService {
  GetWeatherForecasts(request: Empty): Promise<WeatherForecasts>;
}

export const WeatherForecastGrpcServiceServiceName = "WeatherForecastGrpcService";
export class WeatherForecastGrpcServiceClientImpl implements WeatherForecastGrpcService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || WeatherForecastGrpcServiceServiceName;
    this.rpc = rpc;
    this.GetWeatherForecasts = this.GetWeatherForecasts.bind(this);
  }
  GetWeatherForecasts(request: Empty): Promise<WeatherForecasts> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWeatherForecasts", data);
    return promise.then((data) => WeatherForecasts.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
