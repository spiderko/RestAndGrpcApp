// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "engine.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Engine } from "./engine";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { JobCreateResponse } from "./engine";
import type { JobCreateRequest } from "./engine";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Engine
 */
export interface IEngineClient {
    /**
     * @generated from protobuf rpc: CreateJob(JobCreateRequest) returns (stream JobCreateResponse);
     */
    createJob(input: JobCreateRequest, options?: RpcOptions): ServerStreamingCall<JobCreateRequest, JobCreateResponse>;
}
/**
 * @generated from protobuf service Engine
 */
export class EngineClient implements IEngineClient, ServiceInfo {
    typeName = Engine.typeName;
    methods = Engine.methods;
    options = Engine.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateJob(JobCreateRequest) returns (stream JobCreateResponse);
     */
    createJob(input: JobCreateRequest, options?: RpcOptions): ServerStreamingCall<JobCreateRequest, JobCreateResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<JobCreateRequest, JobCreateResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
