// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "weatherForecast.proto" (syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { StringValue } from "./google/protobuf/wrappers";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message GrpcWeatherForecasts
 */
export interface GrpcWeatherForecasts {
    /**
     * @generated from protobuf field: repeated GrpcWeatherForecast forecasts = 1;
     */
    forecasts: GrpcWeatherForecast[];
}
/**
 * @generated from protobuf message GrpcWeatherForecast
 */
export interface GrpcWeatherForecast {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp date = 1;
     */
    date?: Timestamp;
    /**
     * @generated from protobuf field: int32 temperatureC = 2;
     */
    temperatureC: number;
    /**
     * @generated from protobuf field: int32 temperatureF = 3;
     */
    temperatureF: number;
    /**
     * @generated from protobuf field: google.protobuf.StringValue summary = 4;
     */
    summary?: StringValue;
}
/**
 * @generated from protobuf message WeatherForecastRequest
 */
export interface WeatherForecastRequest {
    /**
     * @generated from protobuf field: int32 qty = 1;
     */
    qty: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GrpcWeatherForecasts$Type extends MessageType<GrpcWeatherForecasts> {
    constructor() {
        super("GrpcWeatherForecasts", [
            { no: 1, name: "forecasts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GrpcWeatherForecast }
        ]);
    }
    create(value?: PartialMessage<GrpcWeatherForecasts>): GrpcWeatherForecasts {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.forecasts = [];
        if (value !== undefined)
            reflectionMergePartial<GrpcWeatherForecasts>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcWeatherForecasts): GrpcWeatherForecasts {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GrpcWeatherForecast forecasts */ 1:
                    message.forecasts.push(GrpcWeatherForecast.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcWeatherForecasts, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GrpcWeatherForecast forecasts = 1; */
        for (let i = 0; i < message.forecasts.length; i++)
            GrpcWeatherForecast.internalBinaryWrite(message.forecasts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GrpcWeatherForecasts
 */
export const GrpcWeatherForecasts = new GrpcWeatherForecasts$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrpcWeatherForecast$Type extends MessageType<GrpcWeatherForecast> {
    constructor() {
        super("GrpcWeatherForecast", [
            { no: 1, name: "date", kind: "message", T: () => Timestamp },
            { no: 2, name: "temperatureC", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "temperatureF", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "summary", kind: "message", T: () => StringValue }
        ]);
    }
    create(value?: PartialMessage<GrpcWeatherForecast>): GrpcWeatherForecast {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.temperatureC = 0;
        message.temperatureF = 0;
        if (value !== undefined)
            reflectionMergePartial<GrpcWeatherForecast>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrpcWeatherForecast): GrpcWeatherForecast {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp date */ 1:
                    message.date = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.date);
                    break;
                case /* int32 temperatureC */ 2:
                    message.temperatureC = reader.int32();
                    break;
                case /* int32 temperatureF */ 3:
                    message.temperatureF = reader.int32();
                    break;
                case /* google.protobuf.StringValue summary */ 4:
                    message.summary = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.summary);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrpcWeatherForecast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp date = 1; */
        if (message.date)
            Timestamp.internalBinaryWrite(message.date, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 temperatureC = 2; */
        if (message.temperatureC !== 0)
            writer.tag(2, WireType.Varint).int32(message.temperatureC);
        /* int32 temperatureF = 3; */
        if (message.temperatureF !== 0)
            writer.tag(3, WireType.Varint).int32(message.temperatureF);
        /* google.protobuf.StringValue summary = 4; */
        if (message.summary)
            StringValue.internalBinaryWrite(message.summary, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GrpcWeatherForecast
 */
export const GrpcWeatherForecast = new GrpcWeatherForecast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeatherForecastRequest$Type extends MessageType<WeatherForecastRequest> {
    constructor() {
        super("WeatherForecastRequest", [
            { no: 1, name: "qty", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WeatherForecastRequest>): WeatherForecastRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qty = 0;
        if (value !== undefined)
            reflectionMergePartial<WeatherForecastRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeatherForecastRequest): WeatherForecastRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 qty */ 1:
                    message.qty = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeatherForecastRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 qty = 1; */
        if (message.qty !== 0)
            writer.tag(1, WireType.Varint).int32(message.qty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeatherForecastRequest
 */
export const WeatherForecastRequest = new WeatherForecastRequest$Type();
/**
 * @generated ServiceType for protobuf service WeatherForecastGrpcService
 */
export const WeatherForecastGrpcService = new ServiceType("WeatherForecastGrpcService", [
    { name: "GetWeatherForecasts", options: {}, I: Empty, O: GrpcWeatherForecasts },
    { name: "GetWeatherForecastsByQty", options: {}, I: WeatherForecastRequest, O: GrpcWeatherForecasts }
]);
