// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "engine.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message JobCreateRequest
 */
export interface JobCreateRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string jobTitle = 2;
     */
    jobTitle: string;
}
/**
 * @generated from protobuf message JobCreateResponse
 */
export interface JobCreateResponse {
    /**
     * @generated from protobuf field: bool isFinished = 1;
     */
    isFinished: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: int32 progress = 3;
     */
    progress: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class JobCreateRequest$Type extends MessageType<JobCreateRequest> {
    constructor() {
        super("JobCreateRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "jobTitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JobCreateRequest>): JobCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.jobTitle = "";
        if (value !== undefined)
            reflectionMergePartial<JobCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobCreateRequest): JobCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string jobTitle */ 2:
                    message.jobTitle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string jobTitle = 2; */
        if (message.jobTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.jobTitle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message JobCreateRequest
 */
export const JobCreateRequest = new JobCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobCreateResponse$Type extends MessageType<JobCreateResponse> {
    constructor() {
        super("JobCreateResponse", [
            { no: 1, name: "isFinished", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "progress", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<JobCreateResponse>): JobCreateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isFinished = false;
        message.message = "";
        message.progress = 0;
        if (value !== undefined)
            reflectionMergePartial<JobCreateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobCreateResponse): JobCreateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool isFinished */ 1:
                    message.isFinished = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* int32 progress */ 3:
                    message.progress = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobCreateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool isFinished = 1; */
        if (message.isFinished !== false)
            writer.tag(1, WireType.Varint).bool(message.isFinished);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* int32 progress = 3; */
        if (message.progress !== 0)
            writer.tag(3, WireType.Varint).int32(message.progress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message JobCreateResponse
 */
export const JobCreateResponse = new JobCreateResponse$Type();
/**
 * @generated ServiceType for protobuf service Engine
 */
export const Engine = new ServiceType("Engine", [
    { name: "CreateJob", serverStreaming: true, options: {}, I: JobCreateRequest, O: JobCreateResponse }
]);
